.TH pvof 1 "2017" "version @VERSION@" "USER COMMANDS"

.SH NAME
pvof \- display status of open files of a process

.SH SYNOPSIS
.B pvof [options] command [args...]
.br
.B pvof [options] -p pid

.SH DESCRIPTION

\fBpvof\fR displays for a given process the file offset of each file
descriptor open to a regular file. In the first form, \fBpvof\fR
behaves similarly to time(1): it starts the program \fBcommand\fR with
the provided arguments and start to monitor the open files. In the
second form, it monitors an existing running program.

Unless --nocolor is used, quantities related to reading are displayed in blue
and quantities related to writing are displayed in green.

The output has a header for each process like this:

CHAR    25k| 12.3k     0 /s: 3.32k/s|    0 /s: 2.05k/s IO  49.2k|    0      0 /s: 8.19k/s|    0 /s:    0 /s 96949:slow_cat
        (1)   (2)     (3)     (4)       (5)     (6)         (7)     (8)    (9)     (10)      (11)     (12)   (13)  (14)

(1) is the total number of bytes read and (2) the total number of bytes written.
(3) and (4) are the instantaneous and long term read speed in bytes/s. (5) and
(6) are the instantaneous and long term write speed in bytes/s. Fields 7-12 are
identical but for the amount of actual I/O generated (this may differ from the
CHAR information if, say, a file is in cache and thus does not actually generate
I/O from the drive). (13) is the PAID and (14) the program name.

The output has 6 fields for each open file descriptor, and look like this:

 16.4k/ 70.5k: 8.19k/s: 6.61s: 19.8s  /home/gus/Development/UMD/pvof/Makefile.in
  (1)    (2)    (3)      (4)    (5)      (6)

(1) is the offset in the file, (2) is the size of the file, (3) is the
instantaneous reading/writing speed, (4) is the estimated remaining
time based on the instantaneous speed, (5) is the estimated remaining
time based on the average speed since the start of \fBpvof\fR, and (6)
is the file path.

Only information about regular file is provided, as the offset is
meaningless on pipes, sockets and special files. Use \fB--f\fR to
force \fBpvof\fR to display information about all file descriptors.

.SH OPTIONS

.TP
.B -n, --seconds=int32
Number of seconds between updates and to compute the speed average. By
default every second.

.TP
.B -f, --force
Display information about all files, even on file descriptors that
\fBpvof\fR determined to be "non-interesting", like descriptors to
pipes and sockets.

.TP
.B --fd=int32
By default, the progress information is written on \fBstderr\fR, file
descriptor 2. This option uses a different file descriptor to write
the information. The file descriptor should be connected to a terminal.

.TP
.B -F, --follow
Monitor the process and the children processes.

.TP
.B --nocolor
Do not display colors

.SH SIGNALS

.TP
.B SIGTERM, SIGINT
If the first form is used (that is \fBpvof\fR started the command),
\fBpvof\fR stops displaying progress information and simply waits for
the command to terminate. The monitored program keeps on running
unaffected.

If the second form is used, \fBpvof\fR stops immediatly. The monitored
program keeps on running unaffected.

.TP
.B SIGUSR1
This toggles the display of the progress. 

.SH RETURN VALUE
If the second form is used, the return value is 0.

If the first form is used, the return value is exactly identical as
the return value of the monitored program. Even if the program was
killed by a signal, it will appear that \fBpvof\fR was killed by the
same signal. That is, \fBpvof\fR is transparent and can be used in
pipelines.

.SH AUTHOR
Guillaume Mar√ßais (gmarcais@cs.cmu.edu)

.SH SEE ALSO
pv(1), time(1), lseek(2), proc(5)

.PP
